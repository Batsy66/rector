#Использовать fs
#Использовать gitrunner
#Использовать v8runner
#Использовать v8storage
#Использовать asserts

Перем ТаблицаВерсийХранилища;
Перем ПараметрыЭкспорта;
Перем ТаблицаАвторов;


Процедура ПриСозданииОбъекта(_ПараметрыЭкспорта)
	
	ПараметрыЭкспорта = _ПараметрыЭкспорта;
	

КонецПроцедуры

Процедура ЭкспортироватьХранилище() Экспорт
	ЗаполнитьТаблицуВерсий();
	ЗаполнитьТаблицуАвторов();
КонецПроцедуры 

Процедура ЗаполнитьТаблицуВерсий()
	Если ТаблицаВерсийХранилища = Неопределено Тогда
		ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
		ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПараметрыЭкспорта.ПутьХранилища);
		Если (ПараметрыЭкспорта.ПользовательХранилища <> Неопределено и ПараметрыЭкспорта.ПарольПользователяХранилища <> Неопределено) Тогда
			ХранилищеКонфигурации.УстановитьПараметрыАвторизации(ПараметрыЭкспорта.ПользовательХранилища, ПараметрыЭкспорта.ПарольПользователяХранилища);
		КонецЕсли;
		ТаблицаВерсийХранилища = ХранилищеКонфигурации.ПолучитьТаблицуВерсий();
	КонецЕсли;
КонецПроцедуры

// Получает таблицу авторов из файла
//
// Параметры:
//   ПутьКФайлуАвторов - Строка - путь к файлу авторов
//
Процедура ЗаполнитьТаблицуАвторов() Экспорт
	
	СтандартнаяОбработка = Истина;

	ТаблицаАвторов = НоваяТаблицаАвторов();

	Если СтандартнаяОбработка Тогда
		ПрочитатьФайлАвторов(ПараметрыЭкспорта.ПутьКФайлуAUTHORS, ТаблицаАвторов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьФайлАвторов(ПутьКФайлуАвторов, ТаблицаАвторов)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуАвторов) Тогда
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ПутьКФайлуАвторов);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;

	ТекстовыйФайл = Новый ЧтениеТекста(ПутьКФайлуАвторов, "utf-8");
	ТекстФайла = ТекстовыйФайл.Прочитать();
	
	МассивСтрокФайла = СтрРазделить(ТекстФайла, Символы.ПС, Ложь);

	Для каждого СтрокаФайла Из МассивСтрокФайла Цикл

		Если СтрНачинаетсяС(СокрЛП(СтрокаФайла), "//") Тогда
			Продолжить;
		КонецЕсли;

		МассивКлючей =  СтрРазделить(СтрокаФайла, "=", Ложь);

		НоваяСтрока = ТаблицаАвторов.Добавить();
		НоваяСтрока.Автор = СокрЛП(МассивКлючей[0]);
		ПредставлениеАвтора = СокрЛП(МассивКлючей[1]);
		
		НоваяСтрока.ПользовательGit = СтрРазделить(ПредставлениеАвтора,"<")[0];
		НоваяСтрока.ПочтаПользователяGit = СтрЗаменить(СтрРазделить(ПредставлениеАвтора, "<")[1], ">", "");
	КонецЦикла;

	ТекстовыйФайл.Закрыть();

	Если ТекстовыйФайл <> Неопределено Тогда
		ОсвободитьОбъект(ТекстовыйФайл);
	КонецЕсли;

КонецПроцедуры

Функция НоваяТаблицаАвторов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Автор");
	Таблица.Колонки.Добавить("ПользовательGit");
	Таблица.Колонки.Добавить("ПочтаПользователяGit");
	
	Возврат Таблица;
	
КонецФункции

Функция ДатаPOSIX(Знач Дата)
	
	Возврат "" + Год(Дата) + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + " "
	+ ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата))
	+ ":" + ФорматДвузначноеЧисло(Секунда(Дата));
	
КонецФункции

Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
	ЧислоСтрокой = Строка(ЗначениеЧисло);
	Если СтрДлина(ЧислоСтрокой) < 2 Тогда
		ЧислоСтрокой = "0" + ЧислоСтрокой;
	КонецЕсли;
	
	Возврат ЧислоСтрокой;
КонецФункции

Функция ИмяКонфигурацииПоставщика()
	КаталогСКОнфигурациейПоставщика = ОбъединитьПути(ПараметрыЭкспорта.КаталогВременныхФайлов, "Ext", "Pare");
	НайденныеФайлы = НайтиФайлы(КаталогСКОнфигурациейПоставщика);
	Ожидаем.Что(НайденныеФайлы.Количество()).Равно(1);
	Возврат НайденныеФайлы[0];
КонецФункции

